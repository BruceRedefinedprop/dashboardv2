/*
The test below verifies that that dshbd_metrics.js function for creating model 
years works properly,  We first test hardcoded data against test array to test
the buildModelYears function against existing data.

Then we purposely fail the test, by changing the test data, to verify that Jasmine
is working.

Then we create test data for a 7 year model duration and test it against modelYears array generated
by the buildModelYears function.
*/

describe("Model Years", function() {
  var modelDuration;

  beforeEach(function() {
    modelDuration = 5;
  });

  it("match models years duration of 5", function() {
    current_building.purchaseDate = "3/15/17";
    var modelyears = buildModelYears(modelDuration);
    var yearsTest = [];
    yearsTest[0] = new Years(new Date("4/1/17"), new Date("3/31/18"));
    yearsTest[1] = new Years(new Date("4/1/18"), new Date("3/31/19"));
    yearsTest[2] = new Years(new Date("4/1/19"), new Date("3/31/20"));
    yearsTest[3] = new Years(new Date("4/1/20"), new Date("3/31/21"));
    yearsTest[4] = new Years(new Date("4/1/21"), new Date("3/31/22"));
    expect(yearsTest).toEqual(modelyears);
  });

  it("designed to fail - test array has 4 instead of 5 yeaars", function() {
    current_building.purchaseDate = "3/15/17";
    var modelyears = buildModelYears(modelDuration);
    var yearsTest = [];
    yearsTest[0] = new Years(new Date("4/1/17"), new Date("3/31/18"));
    yearsTest[1] = new Years(new Date("4/1/18"), new Date("3/31/19"));
    yearsTest[2] = new Years(new Date("4/1/19"), new Date("3/31/20"));
    yearsTest[3] = new Years(new Date("4/1/20"), new Date("3/31/21"));

    expect(yearsTest).toEqual(modelyears);
  });

});

describe("Model Years", function() {
  var modelDuration;


  beforeEach(function() {
    modelDuration = 7;
  });

  it("match models years duration of 7", function() {
    current_building.purchaseDate = "6/2/18";
    var modelyears = buildModelYears(modelDuration);
    var yearsTest = [];
    yearsTest[0] = new Years(new Date("7/1/18"), new Date("6/30/19"));
    yearsTest[1] = new Years(new Date("7/1/19"), new Date("6/30/20"));
    yearsTest[2] = new Years(new Date("7/1/20"), new Date("6/30/21"));
    yearsTest[3] = new Years(new Date("7/1/21"), new Date("6/30/22"));
    yearsTest[4] = new Years(new Date("7/1/22"), new Date("6/30/23"));
    yearsTest[5] = new Years(new Date("7/1/23"), new Date("6/30/24"));
    yearsTest[6] = new Years(new Date("7/1/24"), new Date("6/30/25"));

    expect(yearsTest).toEqual(modelyears);
  });


});

/*  
In the next set of tests, we test set of functions that create modelRent array. 
This the modelRent array is created by functions in dshbd_metrics.js.  It takes a 
tenant's rent table, extracts the rent to align with model years and then sums up
the rent for that model year in a single number, producing an array of rents by model year.

In the first test, create test data and check it against the hard coded dated.
Then, we use the test data to build an rent array and test it against the modelRent
generated by the dshbd_metrics.js.   Keep in mind this data and results were 
already validated by the expected results spreadsheet.

Then we cause a failure by modifying the test data.

*/

describe("create model rent array", function() {
  var tenantsAr = [];
   tenantsAr[0] = new Tenant("Furniture", 20000, []);
    tenantsAr[0].rents = [];
    tenantsAr[1] = new Tenant("Distillery", 30000, []);
    tenantsAr[0].rents = [];

    //Below is brute force data,  I didnot want replicate code that I was testing.
    // Test data for new tenants and rent tables

    tenantsAr[0].rents[0] = new Rent(new Date("4/1/2016"), new Date("3/31/2017"), 44166);
    tenantsAr[0].rents[1] = new Rent(new Date("4/1/2017"), new Date("3/31/2018"), roundToTwo(tenantsAr[0].rents[0].monthlyRent * 1.025));
    tenantsAr[0].rents[2] = new Rent(new Date("4/1/2018"), new Date("3/31/2019"), roundToTwo(tenantsAr[0].rents[1].monthlyRent * 1.025));
    tenantsAr[0].rents[3] = new Rent(new Date("4/1/2019"), new Date("3/31/2020"), roundToTwo(tenantsAr[0].rents[2].monthlyRent * 1.025));
    tenantsAr[0].rents[4] = new Rent(new Date("4/1/2020"), new Date("3/31/2021"), roundToTwo(tenantsAr[0].rents[3].monthlyRent * 1.025));
    tenantsAr[0].rents[5] = new Rent(new Date("4/1/2021"), new Date("3/31/2022"), roundToTwo(tenantsAr[0].rents[4].monthlyRent * 1.025));
    tenantsAr[0].rents[6] = new Rent(new Date("4/1/2022"), new Date("3/31/2023"), roundToTwo(tenantsAr[0].rents[5].monthlyRent * 1.025));

    tenantsAr[1].rents[0] = new Rent(new Date("6/1/2016"), new Date("5/31/2017"), 44000);
    tenantsAr[1].rents[1] = new Rent(new Date("6/1/2017"), new Date("5/31/2018"), roundToTwo(tenantsAr[1].rents[0].monthlyRent * 1.025));
    tenantsAr[1].rents[2] = new Rent(new Date("6/1/2018"), new Date("5/31/2019"), roundToTwo(tenantsAr[1].rents[1].monthlyRent * 1.025));
    tenantsAr[1].rents[3] = new Rent(new Date("6/1/2019"), new Date("5/31/2020"), roundToTwo(tenantsAr[1].rents[2].monthlyRent * 1.025));
    tenantsAr[1].rents[4] = new Rent(new Date("6/1/2020"), new Date("5/31/2021"), roundToTwo(tenantsAr[1].rents[3].monthlyRent * 1.025));
    tenantsAr[1].rents[5] = new Rent(new Date("6/1/2021"), new Date("5/31/2022"), roundToTwo(tenantsAr[1].rents[4].monthlyRent * 1.025));
    tenantsAr[1].rents[6] = new Rent(new Date("6/1/2022"), new Date("5/31/2023"), roundToTwo(tenantsAr[1].rents[5].monthlyRent * 1.025));


 

  it("verify test data matches tenants array", function() {
    expect(tenantsAr).toEqual(tenants);
  })

  it("verify test data will build an model rent array correctly", function() {
    var modelRentTest = buildModelRent();
    expect(modelRentTest).toEqual(modelRent);
  })

  it("FAIL test data does not match rent array correctly", function() {
    var modelRentTest = buildModelRent();
    modelRentTest.pop();
    expect(modelRentTest).toEqual(modelRent);
  })
});

